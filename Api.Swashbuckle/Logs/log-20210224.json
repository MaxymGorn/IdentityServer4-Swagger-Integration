{"@t":"2021-02-24T21:35:27.4459907Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:35:27.4975004Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:35:28.2473276Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:35:28.3858961Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:35:28.4753298Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:35:28.5804323Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000050-0001-fd00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:35:28.5813834Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:35:28.6763647Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:35:28.6775062Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:35:28.7160779Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 136.7156ms"],"ElapsedMilliseconds":136.7156,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 136.7156ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000050-0001-fd00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:36:03.9984551Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:36:04.0317076Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:36:04.4468392Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:36:04.5578662Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:36:04.6417667Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:36:04.6998030Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"800003d9-0004-fe00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:36:04.7036304Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:04.7374105Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:04.7381871Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:04.7704538Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 72.2662ms"],"ElapsedMilliseconds":72.2662,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 72.2662ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"800003d9-0004-fe00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:36:08.9069933Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:09.0694303Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:09.1776156Z","@mt":"Saved {count} entities to in-memory store.","count":2,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:14.2115491Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:14.2129139Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:14.2130182Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:18.2923564Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:18.3060787Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:18.3182935Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:23.3382378Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:23.3389328Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:23.3391176Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:27.4096610Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:27.4121558Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:27.4126799Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:32.4267248Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:32.4271238Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:32.4272588Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:36.4793782Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:36.4823034Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:36.4828645Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:41.4992343Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:41.4996309Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:41.4997741Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:45.6001375Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:45.6031366Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:45.6036747Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:50.6142553Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:50.6146251Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:50.6147052Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:54.7103396Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:54.7129209Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:54.7134926Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:59.7264541Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:36:59.7267884Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:36:59.7268649Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:03.8111989Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:03.8142699Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:03.8149596Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:08.8365077Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:08.8367776Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:08.8368865Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:12.9253820Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:12.9287022Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:12.9291293Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:17.9433261Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:17.9435618Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:17.9436858Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:22.0324639Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:22.0356829Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:22.0362034Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:27.0434959Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:27.0437085Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:27.0438213Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:31.1489971Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:31.1522768Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:31.1529053Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:36.1652038Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:36.1655293Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:36.1656927Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:40.2664418Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:40.2693978Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:40.2698343Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:45.2773515Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:45.2776540Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:45.2777522Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:49.3617723Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:49.3649316Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:49.3655571Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:52.2222057Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:37:52.2549158Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:37:52.6552313Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:37:52.7769928Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:37:52.8632265Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:37:52.9186511Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000003-0004-fb00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:37:52.9209222Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:52.9577261Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:52.9590922Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:37:52.9912849Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 73.9000ms"],"ElapsedMilliseconds":73.9,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 73.9000ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000003-0004-fb00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:37:57.1226442Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:57.1979857Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:37:57.2857579Z","@mt":"Saved {count} entities to in-memory store.","count":2,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:02.3132729Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:02.3150126Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:02.3151286Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:06.3688182Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:06.3762510Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:06.3871335Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:11.3775880Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:38:11.4145264Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:38:11.8014015Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:38:11.9084675Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:38:12.0013001Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:38:12.0620753Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000005-0004-fb00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:38:12.0647013Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:12.1003768Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:12.1012748Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:12.1354565Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 76.0523ms"],"ElapsedMilliseconds":76.0523,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 76.0523ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000005-0004-fb00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:38:16.2612455Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:16.3371634Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:16.4230407Z","@mt":"Saved {count} entities to in-memory store.","count":2,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:17.7507799Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000007-0004-fb00-b63f-84710c7967bb","RequestPath":"/swagger"}
{"@t":"2021-02-24T21:38:17.7555793Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger - - - 301 - - 4.7451ms"],"ElapsedMilliseconds":4.7451,"StatusCode":301,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger - - - 301 - - 4.7451ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000007-0004-fb00-b63f-84710c7967bb","RequestPath":"/swagger"}
{"@t":"2021-02-24T21:38:17.7578376Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000009-0004-fb00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:38:17.8208327Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 200 - text/html;charset=utf-8 62.7777ms"],"ElapsedMilliseconds":62.7777,"StatusCode":200,"ContentType":"text/html;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 200 - text/html;charset=utf-8 62.7777ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000009-0004-fb00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:38:17.8465456Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/swagger-ui.css - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/swagger-ui.css","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/swagger-ui.css - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000044-0005-fd00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui.css"}
{"@t":"2021-02-24T21:38:17.8473597Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/swagger-ui-standalone-preset.js - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/swagger-ui-standalone-preset.js","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/swagger-ui-standalone-preset.js - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000006-0006-fd00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui-standalone-preset.js"}
{"@t":"2021-02-24T21:38:17.8475852Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/swagger-ui-bundle.js - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/swagger-ui-bundle.js","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/swagger-ui-bundle.js - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"8000043e-0006-ff00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui-bundle.js"}
{"@t":"2021-02-24T21:38:17.8658094Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/swagger-ui.css","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"80000044-0005-fd00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui.css"}
{"@t":"2021-02-24T21:38:17.8675082Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/swagger-ui-standalone-preset.js","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"80000006-0006-fd00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui-standalone-preset.js"}
{"@t":"2021-02-24T21:38:17.8706087Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/swagger-ui.css - - - 200 143212 text/css 23.9334ms"],"ElapsedMilliseconds":23.9334,"StatusCode":200,"ContentType":"text/css","ContentLength":143212,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/swagger-ui.css","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/swagger-ui.css - - - 200 143212 text/css 23.9334ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000044-0005-fd00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui.css"}
{"@t":"2021-02-24T21:38:17.8736102Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/swagger-ui-standalone-preset.js - - - 200 332952 application/javascript 26.1951ms"],"ElapsedMilliseconds":26.1951,"StatusCode":200,"ContentType":"application/javascript","ContentLength":332952,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/swagger-ui-standalone-preset.js","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/swagger-ui-standalone-preset.js - - - 200 332952 application/javascript 26.1951ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000006-0006-fd00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui-standalone-preset.js"}
{"@t":"2021-02-24T21:38:17.8815692Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/swagger-ui-bundle.js","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"8000043e-0006-ff00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui-bundle.js"}
{"@t":"2021-02-24T21:38:17.8959323Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/swagger-ui-bundle.js - - - 200 1061588 application/javascript 48.3496ms"],"ElapsedMilliseconds":48.3496,"StatusCode":200,"ContentType":"application/javascript","ContentLength":1061588,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/swagger-ui-bundle.js","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/swagger-ui-bundle.js - - - 200 1061588 application/javascript 48.3496ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"8000043e-0006-ff00-b63f-84710c7967bb","RequestPath":"/swagger/swagger-ui-bundle.js"}
{"@t":"2021-02-24T21:38:18.0327092Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/v1/swagger.json - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/v1/swagger.json - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"800003dc-0002-ff00-b63f-84710c7967bb","RequestPath":"/swagger/v1/swagger.json"}
{"@t":"2021-02-24T21:38:18.0699511Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/favicon-32x32.png - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/favicon-32x32.png","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/favicon-32x32.png - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000007-0003-fe00-b63f-84710c7967bb","RequestPath":"/swagger/favicon-32x32.png"}
{"@t":"2021-02-24T21:38:18.0710104Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/favicon-32x32.png","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"80000007-0003-fe00-b63f-84710c7967bb","RequestPath":"/swagger/favicon-32x32.png"}
{"@t":"2021-02-24T21:38:18.0715247Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/favicon-32x32.png - - - 200 628 image/png 1.4739ms"],"ElapsedMilliseconds":1.4739,"StatusCode":200,"ContentType":"image/png","ContentLength":628,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/favicon-32x32.png","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/favicon-32x32.png - - - 200 628 image/png 1.4739ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000007-0003-fe00-b63f-84710c7967bb","RequestPath":"/swagger/favicon-32x32.png"}
{"@t":"2021-02-24T21:38:18.1090047Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 76.2569ms"],"ElapsedMilliseconds":76.2569,"StatusCode":200,"ContentType":"application/json;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 76.2569ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"800003dc-0002-ff00-b63f-84710c7967bb","RequestPath":"/swagger/v1/swagger.json"}
{"@t":"2021-02-24T21:38:21.4460189Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:21.4472644Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:21.4474094Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:25.5404792Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:25.5502961Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:25.5615160Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:30.5713808Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:30.5717836Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:30.5718739Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:34.6634457Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:34.6658677Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:34.6664929Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:39.6704891Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:39.6707256Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:39.6708007Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:43.7692391Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:43.7717605Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:43.7723459Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:48.7736494Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:48.7742192Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:48.7744288Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:52.8669539Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:52.8693744Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:52.8698580Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:57.8711918Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:38:57.8717110Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:38:57.8717997Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:39:01.9577457Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:39:01.9601321Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:39:01.9607051Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:39:06.9694963Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:39:06.9697977Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:39:06.9699173Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:39:11.0422872Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:39:11.0451910Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:39:11.0458811Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:49:46.9670661Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:49:47.0003478Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:49:47.4060385Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:49:47.5318281Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:49:47.6300348Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:49:47.6972187Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000006-0007-fe00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:49:47.7108560Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:49:47.7475142Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:49:47.7484581Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:49:47.7939025Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 98.1498ms"],"ElapsedMilliseconds":98.1498,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/ - - - 404 - - 98.1498ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000006-0007-fe00-b63f-84710c7967bb","RequestPath":"/"}
{"@t":"2021-02-24T21:49:51.9094397Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:49:52.0142890Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:49:52.1149942Z","@mt":"Saved {count} entities to in-memory store.","count":2,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:49:57.1504551Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:49:57.1519981Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:49:57.1521003Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:01.2265995Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:01.2371029Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:01.2481545Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:06.2637171Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:06.2642730Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:06.2644290Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:10.3287533Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:10.3326159Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:10.3332891Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:15.3342541Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:15.3346334Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:15.3347487Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:31.2236280Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:50:31.2544241Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:50:31.6263519Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:50:31.7356711Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:50:31.8192289Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:50:31.8693014Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"8000000c-0004-fd00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:50:31.8713830Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:31.9068940Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:31.9078760Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:31.9406888Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 404 - - 72.9155ms"],"ElapsedMilliseconds":72.9155,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 404 - - 72.9155ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"8000000c-0004-fd00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:50:34.5207265Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000022-0006-fe00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:50:34.5231115Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 404 - - 2.3395ms"],"ElapsedMilliseconds":2.3395,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 404 - - 2.3395ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"80000022-0006-fe00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:50:35.1118337Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:44362/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"800003f6-0002-ff00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:50:35.1137448Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 404 - - 1.9296ms"],"ElapsedMilliseconds":1.9296,"StatusCode":404,"ContentType":null,"ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:44362","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:44362/swagger/index.html - - - 404 - - 1.9296ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"800003f6-0002-ff00-b63f-84710c7967bb","RequestPath":"/swagger/index.html"}
{"@t":"2021-02-24T21:50:36.0616507Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:36.1402455Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:36.2317321Z","@mt":"Saved {count} entities to in-memory store.","count":2,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:41.2607714Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:41.2624470Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:41.2625830Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:45.3502283Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:45.3593574Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:45.3704228Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:50.3854607Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:50.3857395Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:50.3859507Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:54.4926226Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:54.4959191Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:54.4967205Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:59.5013403Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:50:59.5016555Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:50:59.5017684Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:05.3804469Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:51:05.4165502Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:51:05.7759474Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:51:05.8878433Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:51:05.9718894Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:51:06.0393850Z","@mt":"Overriding address(es) '{addresses}'. Binding to endpoints defined in {methodName} instead.","@l":"Warning","addresses":"https://localhost:5001/swagger, http://localhost:5000/swagger","methodName":"UseKestrel()","SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2021-02-24T21:51:06.0957188Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:06.1324747Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:06.1358673Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:09.7224636Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000001","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.8358276Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 115.0056ms"],"ElapsedMilliseconds":115.0056,"StatusCode":200,"ContentType":"text/html;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 115.0056ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000001","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.8592399Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/swagger-ui-standalone-preset.js - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/swagger-ui-standalone-preset.js","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/swagger-ui-standalone-preset.js - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000007","RequestPath":"/swagger/swagger-ui-standalone-preset.js","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.8592399Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/swagger-ui-bundle.js - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/swagger-ui-bundle.js","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/swagger-ui-bundle.js - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000005","RequestPath":"/swagger/swagger-ui-bundle.js","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.8593493Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/swagger-ui.css - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/swagger-ui.css","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/swagger-ui.css - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000003","RequestPath":"/swagger/swagger-ui.css","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.8887783Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/swagger-ui.css","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HM6P1P4SCQVS:00000003","RequestPath":"/swagger/swagger-ui.css","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.8919473Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/swagger-ui-standalone-preset.js","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HM6P1P4SCQVS:00000007","RequestPath":"/swagger/swagger-ui-standalone-preset.js","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.9040716Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/swagger-ui.css - - - 200 143212 text/css 44.6608ms"],"ElapsedMilliseconds":44.6608,"StatusCode":200,"ContentType":"text/css","ContentLength":143212,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/swagger-ui.css","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/swagger-ui.css - - - 200 143212 text/css 44.6608ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000003","RequestPath":"/swagger/swagger-ui.css","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.9040716Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/swagger-ui-standalone-preset.js - - - 200 332952 application/javascript 44.8013ms"],"ElapsedMilliseconds":44.8013,"StatusCode":200,"ContentType":"application/javascript","ContentLength":332952,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/swagger-ui-standalone-preset.js","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/swagger-ui-standalone-preset.js - - - 200 332952 application/javascript 44.8013ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000007","RequestPath":"/swagger/swagger-ui-standalone-preset.js","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.9150822Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/swagger-ui-bundle.js","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HM6P1P4SCQVS:00000005","RequestPath":"/swagger/swagger-ui-bundle.js","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:09.9222272Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/swagger-ui-bundle.js - - - 200 1061588 application/javascript 62.9663ms"],"ElapsedMilliseconds":62.9663,"StatusCode":200,"ContentType":"application/javascript","ContentLength":1061588,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/swagger-ui-bundle.js","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/swagger-ui-bundle.js - - - 200 1061588 application/javascript 62.9663ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000005","RequestPath":"/swagger/swagger-ui-bundle.js","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:10.0482499Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000009","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:10.0840100Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/favicon-32x32.png - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/favicon-32x32.png","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/favicon-32x32.png - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:0000000B","RequestPath":"/swagger/favicon-32x32.png","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:10.0875895Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/favicon-32x32.png","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HM6P1P4SCQVS:0000000B","RequestPath":"/swagger/favicon-32x32.png","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:10.0917945Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/favicon-32x32.png - - - 200 628 image/png 7.7244ms"],"ElapsedMilliseconds":7.7244,"StatusCode":200,"ContentType":"image/png","ContentLength":628,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/favicon-32x32.png","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/favicon-32x32.png - - - 200 628 image/png 7.7244ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:0000000B","RequestPath":"/swagger/favicon-32x32.png","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:10.1277755Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 79.4465ms"],"ElapsedMilliseconds":79.4465,"StatusCode":200,"ContentType":"application/json;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 79.4465ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:00000009","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:10.2662473Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:10.3790720Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:10.4776306Z","@mt":"Saved {count} entities to in-memory store.","count":2,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:14.6897481Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/WeatherForecast - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/WeatherForecast","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/WeatherForecast - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:0000000D","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:14.7073540Z","@mt":"Authorization failed. {0}","0":"These requirements were not met:\r\nDenyAnonymousAuthorizationRequirement: Requires an authenticated user.","EventId":{"Id":2,"Name":"UserAuthorizationFailed"},"SourceContext":"Microsoft.AspNetCore.Authorization.DefaultAuthorizationService","RequestId":"0HM6P1P4SCQVS:0000000D","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:14.9292971Z","@mt":"AuthenticationScheme: {AuthenticationScheme} was challenged.","AuthenticationScheme":"BearerIdentityServerAuthenticationJwt","EventId":{"Id":12,"Name":"AuthenticationSchemeChallenged"},"SourceContext":"Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler","RequestId":"0HM6P1P4SCQVS:0000000D","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:14.9328727Z","@mt":"AuthenticationScheme: {AuthenticationScheme} was challenged.","AuthenticationScheme":"Bearer","EventId":{"Id":12,"Name":"AuthenticationSchemeChallenged"},"SourceContext":"IdentityServer4.AccessTokenValidation.IdentityServerAuthenticationHandler","RequestId":"0HM6P1P4SCQVS:0000000D","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:14.9361609Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/WeatherForecast - - - 401 0 - 246.4217ms"],"ElapsedMilliseconds":246.4217,"StatusCode":401,"ContentType":null,"ContentLength":0,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/WeatherForecast","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/WeatherForecast - - - 401 0 - 246.4217ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1P4SCQVS:0000000D","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1P4SCQVS"}
{"@t":"2021-02-24T21:51:15.4992229Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:15.5063732Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:15.5089039Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:19.5841678Z","@mt":"GetHealthReport threw an exception when trying to get report from https://localhost:6001/health configured with name Identity Server HTTP Check.","@l":"Error","@x":"System.Net.Http.HttpRequestException: Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение. (localhost:6001)\r\n ---> System.Net.Sockets.SocketException (10061): Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|283_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.DefaultConnectAsync(SocketsHttpConnectionContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(Func`3 callback, DnsEndPoint endPoint, HttpRequestMessage requestMessage, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)","SourceContext":"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:19.6245481Z","@mt":"Notification is sent on same window time.","SourceContext":"HealthChecks.UI.Core.Notifications.WebHookFailureNotifier","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:19.6392398Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:24.6467851Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:24.6561839Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:24.6596868Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:35.8371874Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:51:35.8748187Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:51:36.2364036Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:51:36.3456797Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:51:36.4294522Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:51:36.4964393Z","@mt":"Overriding address(es) '{addresses}'. Binding to endpoints defined in {methodName} instead.","@l":"Warning","addresses":"https://localhost:5001/swagger, http://localhost:5000/swagger","methodName":"UseKestrel()","SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2021-02-24T21:51:36.5553793Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:36.5925351Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:36.5957482Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:37.0811952Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000003","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:37.0811953Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000001","RequestPath":"/","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:37.1684112Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/ - - - 404 0 - 88.7760ms"],"ElapsedMilliseconds":88.776,"StatusCode":404,"ContentType":null,"ContentLength":0,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/ - - - 404 0 - 88.7760ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000001","RequestPath":"/","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:37.2474294Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 168.3544ms"],"ElapsedMilliseconds":168.3544,"StatusCode":200,"ContentType":"text/html;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 168.3544ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000003","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:37.4828956Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000005","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:37.5476544Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 64.7667ms"],"ElapsedMilliseconds":64.7667,"StatusCode":200,"ContentType":"application/json;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 64.7667ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000005","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:38.3042040Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":1705.9826,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:38.3083119Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":1719.2486,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:38.5102913Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:43.5348017Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:43.5413888Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:43.5438491Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:43.5521190Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":8.2539,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:43.5557978Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":14.4229,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:43.5687760Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:48.5859466Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:48.5914403Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:48.5950346Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:48.5990580Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":4.0553,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:48.6038452Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":12.4053,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:48.6073891Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:53.6181758Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:53.6241682Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:53.6272649Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:53.6315847Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":4.3263,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:53.6360342Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":11.8449,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:53.6398484Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:57.0931043Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=129D4D5038604AD06A673BACA708D837BDBA7791CF561DC4D29B31B1F417CF40&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjUxOjUwIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/oauth2-redirect.html","QueryString":"?code=129D4D5038604AD06A673BACA708D837BDBA7791CF561DC4D29B31B1F417CF40&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjUxOjUwIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=129D4D5038604AD06A673BACA708D837BDBA7791CF561DC4D29B31B1F417CF40&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjUxOjUwIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000007","RequestPath":"/swagger/oauth2-redirect.html","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:57.1004098Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/oauth2-redirect.html","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HM6P1PDV1M07:00000007","RequestPath":"/swagger/oauth2-redirect.html","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:57.1093072Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=129D4D5038604AD06A673BACA708D837BDBA7791CF561DC4D29B31B1F417CF40&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjUxOjUwIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - - - 200 2589 text/html 16.1400ms"],"ElapsedMilliseconds":16.14,"StatusCode":200,"ContentType":"text/html","ContentLength":2589,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/oauth2-redirect.html","QueryString":"?code=129D4D5038604AD06A673BACA708D837BDBA7791CF561DC4D29B31B1F417CF40&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjUxOjUwIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=129D4D5038604AD06A673BACA708D837BDBA7791CF561DC4D29B31B1F417CF40&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjUxOjUwIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - - - 200 2589 text/html 16.1400ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000007","RequestPath":"/swagger/oauth2-redirect.html","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:51:58.6656873Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:51:58.6716771Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:58.6749930Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:58.6786949Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.6945,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:58.6828388Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":11.1507,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:51:58.6873398Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:52:01.1068109Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/WeatherForecast - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/WeatherForecast","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/WeatherForecast - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.3475070Z","@mt":"Successfully validated the token.","EventId":{"Id":2,"Name":"TokenValidationSucceeded"},"SourceContext":"Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.3600046Z","@mt":"Authorization was successful.","EventId":{"Id":1,"Name":"UserAuthorizationSucceeded"},"SourceContext":"Microsoft.AspNetCore.Authorization.DefaultAuthorizationService","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.3644073Z","@mt":"Executing endpoint '{EndpointName}'","EndpointName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.3802864Z","@mt":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","RouteData":"{action = \"Get\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[Api.Swashbuckle.WeatherForecast] Get()","Controller":"Api.Swashbuckle.Controllers.WeatherForecastController","AssemblyName":"Api.Swashbuckle","EventId":{"Id":3,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"0e8d9fc3-5ee4-4293-8642-864e7f90eb5c","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.3908206Z","@mt":"Test logging","SourceContext":"Api.Swashbuckle.Controllers.WeatherForecastController","ActionId":"0e8d9fc3-5ee4-4293-8642-864e7f90eb5c","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.3969291Z","@mt":"Executing {ObjectResultType}, writing value of type '{Type}'.","ObjectResultType":"ObjectResult","Type":"Api.Swashbuckle.WeatherForecast[]","EventId":{"Id":1,"Name":"ObjectResultExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor","ActionId":"0e8d9fc3-5ee4-4293-8642-864e7f90eb5c","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.4146094Z","@mt":"Executed action {ActionName} in {ElapsedMilliseconds}ms","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","ElapsedMilliseconds":22.1161,"EventId":{"Id":2,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"0e8d9fc3-5ee4-4293-8642-864e7f90eb5c","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.4222406Z","@mt":"Executed endpoint '{EndpointName}'","EndpointName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:01.4258220Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/WeatherForecast - - - 200 - application/json;+charset=utf-8 318.9830ms"],"ElapsedMilliseconds":318.983,"StatusCode":200,"ContentType":"application/json; charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/WeatherForecast","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/WeatherForecast - - - 200 - application/json;+charset=utf-8 318.9830ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1PDV1M07:00000009","RequestPath":"/WeatherForecast","ConnectionId":"0HM6P1PDV1M07"}
{"@t":"2021-02-24T21:52:03.7002113Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:52:03.7069062Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:52:03.7100841Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:52:03.7137016Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.6105,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:52:03.7200512Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":13.125,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:52:03.7259418Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:54:33.6857972Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:54:33.7231716Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:54:34.0839666Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:54:34.1936429Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:54:34.2780724Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:54:34.3411551Z","@mt":"Overriding address(es) '{addresses}'. Binding to endpoints defined in {methodName} instead.","@l":"Warning","addresses":"https://localhost:5001/swagger, http://localhost:5000/swagger","methodName":"UseKestrel()","SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2021-02-24T21:54:34.3990329Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:54:34.4364572Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:34.4405111Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:34.9319800Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1R2V9OMI:00000003","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1R2V9OMI"}
{"@t":"2021-02-24T21:54:34.9319755Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1R2V9OMI:00000001","RequestPath":"/","ConnectionId":"0HM6P1R2V9OMI"}
{"@t":"2021-02-24T21:54:35.0124561Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/ - - - 404 0 - 82.7778ms"],"ElapsedMilliseconds":82.7778,"StatusCode":404,"ContentType":null,"ContentLength":0,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/ - - - 404 0 - 82.7778ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1R2V9OMI:00000001","RequestPath":"/","ConnectionId":"0HM6P1R2V9OMI"}
{"@t":"2021-02-24T21:54:35.1030702Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 174.0577ms"],"ElapsedMilliseconds":174.0577,"StatusCode":200,"ContentType":"text/html;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 174.0577ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1R2V9OMI:00000003","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1R2V9OMI"}
{"@t":"2021-02-24T21:54:35.2480846Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1R2V9OMI:00000005","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1R2V9OMI"}
{"@t":"2021-02-24T21:54:35.3178428Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 69.9097ms"],"ElapsedMilliseconds":69.9097,"StatusCode":200,"ContentType":"application/json;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 69.9097ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1R2V9OMI:00000005","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1R2V9OMI"}
{"@t":"2021-02-24T21:54:36.1338651Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":1690.4891,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:36.1383941Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":1705.4084,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:36.3337781Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:54:41.3628802Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:54:41.3694591Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:41.3719831Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:41.3836829Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":11.6898,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:41.3866672Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":17.2201,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:54:41.4024235Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:03.0500099Z","@mt":"User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.","FullName":"C:\\Users\\MAKS\\AppData\\Local\\ASP.NET\\DataProtection-Keys","EventId":{"Id":63,"Name":"UsingProfileAsKeyRepositoryWithDPAPI"},"SourceContext":"Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
{"@t":"2021-02-24T21:55:03.0873910Z","@mt":"Initializing UI Database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:55:03.4562497Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure"}
{"@t":"2021-02-24T21:55:03.5647296Z","@mt":"Saving healthchecks configuration to database","SourceContext":"HealthChecks.UI.Core.HostedService.UIInitializationHostedService"}
{"@t":"2021-02-24T21:55:03.6483931Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update"}
{"@t":"2021-02-24T21:55:03.7102602Z","@mt":"Overriding address(es) '{addresses}'. Binding to endpoints defined in {methodName} instead.","@l":"Warning","addresses":"https://localhost:5001/swagger, http://localhost:5000/swagger","methodName":"UseKestrel()","SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2021-02-24T21:55:03.7681763Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:03.8066537Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:03.8117759Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:05.4873156Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":1673.1192,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:05.4917988Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":1689.4052,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:05.6846915Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:07.4186993Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000003","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:07.4186992Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/ - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/ - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000001","RequestPath":"/","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:07.4830269Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/ - - - 404 0 - 65.7731ms"],"ElapsedMilliseconds":65.7731,"StatusCode":404,"ContentType":null,"ContentLength":0,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/ - - - 404 0 - 65.7731ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000001","RequestPath":"/","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:07.5498746Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 133.0545ms"],"ElapsedMilliseconds":133.0545,"StatusCode":200,"ContentType":"text/html;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/index.html","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 133.0545ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000003","RequestPath":"/swagger/index.html","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:07.6697201Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000005","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:07.7453126Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 75.6655ms"],"ElapsedMilliseconds":75.6655,"StatusCode":200,"ContentType":"application/json;charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 75.6655ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000005","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:10.7119853Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:10.7191225Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:10.7219357Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:10.7301341Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":8.1857,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:10.7340534Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":14.9226,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:10.7468409Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:15.7620724Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:15.7687090Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:15.7714916Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:15.7753567Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.8593,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:15.7811478Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":12.4408,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:15.7847675Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:17.7153366Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=F44B7CCBED2D27CE171BD80A3CDF6CAF41A9228395735EFFF370879B91738AA5&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjU1OjEyIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/oauth2-redirect.html","QueryString":"?code=F44B7CCBED2D27CE171BD80A3CDF6CAF41A9228395735EFFF370879B91738AA5&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjU1OjEyIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=F44B7CCBED2D27CE171BD80A3CDF6CAF41A9228395735EFFF370879B91738AA5&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjU1OjEyIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000007","RequestPath":"/swagger/oauth2-redirect.html","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:17.7227336Z","@mt":"Sending file. Request path: '{VirtualPath}'. Physical path: '{PhysicalPath}'","VirtualPath":"/oauth2-redirect.html","PhysicalPath":"N/A","EventId":{"Id":2,"Name":"FileServed"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HM6P1RBN0SMB:00000007","RequestPath":"/swagger/oauth2-redirect.html","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:17.7291377Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=F44B7CCBED2D27CE171BD80A3CDF6CAF41A9228395735EFFF370879B91738AA5&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjU1OjEyIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - - - 200 2589 text/html 13.5641ms"],"ElapsedMilliseconds":13.5641,"StatusCode":200,"ContentType":"text/html","ContentLength":2589,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/swagger/oauth2-redirect.html","QueryString":"?code=F44B7CCBED2D27CE171BD80A3CDF6CAF41A9228395735EFFF370879B91738AA5&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjU1OjEyIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/swagger/oauth2-redirect.html?code=F44B7CCBED2D27CE171BD80A3CDF6CAF41A9228395735EFFF370879B91738AA5&scope=api1&state=V2VkIEZlYiAyNCAyMDIxIDIzOjU1OjEyIEdNVCswMjAwICjQt9CwINGB0YXRltC00L3QvtGU0LLRgNC%2B0L%2FQtdC50YHRjNC60LjQvCDRgdGC0LDQvdC00LDRgNGC0L3QuNC8INGH0LDRgdC%2B0Lwp - - - 200 2589 text/html 13.5641ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000007","RequestPath":"/swagger/oauth2-redirect.html","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:20.7888468Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:20.7950970Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:20.7982033Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:20.8025047Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":4.2969,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:20.8087406Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":13.5791,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:20.8130121Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:25.8168537Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:25.8233770Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:25.8259525Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:25.8302026Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":4.225,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:25.8415635Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":18.1618,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:25.8462064Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:30.6460096Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/WeatherForecast/.xml - -"],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/WeatherForecast/.xml","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/WeatherForecast/.xml - -","EventId":{"Id":1,"Name":"RequestStarting"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8028096Z","@mt":"Successfully validated the token.","EventId":{"Id":2,"Name":"TokenValidationSucceeded"},"SourceContext":"Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8109554Z","@mt":"Authorization was successful.","EventId":{"Id":1,"Name":"UserAuthorizationSucceeded"},"SourceContext":"Microsoft.AspNetCore.Authorization.DefaultAuthorizationService","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8145231Z","@mt":"Executing endpoint '{EndpointName}'","EndpointName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8281152Z","@mt":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","RouteData":"{action = \"Get\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[Api.Swashbuckle.WeatherForecast] Get()","Controller":"Api.Swashbuckle.Controllers.WeatherForecastController","AssemblyName":"Api.Swashbuckle","EventId":{"Id":3,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"0a8682e1-fe46-4ac2-96f8-67140af71a38","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8395933Z","@mt":"Executing {ObjectResultType}, writing value of type '{Type}'.","ObjectResultType":"ObjectResult","Type":"Microsoft.AspNetCore.Mvc.ProblemDetails","EventId":{"Id":1,"Name":"ObjectResultExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor","ActionId":"0a8682e1-fe46-4ac2-96f8-67140af71a38","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8555883Z","@mt":"Executed action {ActionName} in {ElapsedMilliseconds}ms","ActionName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","ElapsedMilliseconds":14.897,"EventId":{"Id":2,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"0a8682e1-fe46-4ac2-96f8-67140af71a38","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8603654Z","@mt":"Executed endpoint '{EndpointName}'","EndpointName":"Api.Swashbuckle.Controllers.WeatherForecastController.Get (Api.Swashbuckle)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8633032Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:30.8654112Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished HTTP/2 GET https://localhost:5001/WeatherForecast/.xml - - - 404 - application/problem+json;+charset=utf-8 219.3504ms"],"ElapsedMilliseconds":219.3504,"StatusCode":404,"ContentType":"application/problem+json; charset=utf-8","ContentLength":null,"Protocol":"HTTP/2","Method":"GET","Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/WeatherForecast/.xml","QueryString":"","HostingRequestFinishedLog":"Request finished HTTP/2 GET https://localhost:5001/WeatherForecast/.xml - - - 404 - application/problem+json;+charset=utf-8 219.3504ms","EventId":{"Id":2,"Name":"RequestFinished"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM6P1RBN0SMB:00000009","RequestPath":"/WeatherForecast/.xml","ConnectionId":"0HM6P1RBN0SMB"}
{"@t":"2021-02-24T21:55:30.8713574Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:30.8758043Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:30.8823550Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":6.5528,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:30.8883886Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":17.0049,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:30.8925060Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:35.9136203Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:35.9190560Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:35.9215760Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:35.9264386Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":4.8514,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:35.9336138Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":14.554,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:35.9370628Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:40.9474742Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:40.9535031Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:40.9583091Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:40.9654506Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":7.1495,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:40.9698296Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":16.3209,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:40.9776480Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:45.9893049Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:45.9948745Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:45.9975022Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:46.0007816Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.2679,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:46.0061303Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":11.2516,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:46.0098105Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:51.0166138Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:51.0241442Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:51.0267654Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:51.0303205Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.5652,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:51.0368161Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":12.6682,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:51.0403518Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:56.0526546Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:55:56.0579233Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:56.0612550Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:56.0645759Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.3227,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:56.0676601Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":9.7386,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:55:56.0729554Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:56:01.0838621Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:56:01.0907425Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:01.0934412Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:01.0968292Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.3852,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:01.1025444Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":11.7682,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:01.1069695Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:56:06.1191312Z","@mt":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}' with options: {options}","version":"5.0.1","contextType":"HealthChecksDb","provider":"Microsoft.EntityFrameworkCore.InMemory","options":"StoreName=HealthChecksUI ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","Scope":["HealthReportCollector is collecting health checks results."]}
{"@t":"2021-02-24T21:56:06.1252575Z","@mt":"Start processing HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestPipelineStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:06.1281037Z","@mt":"Sending HTTP request {HttpMethod} {Uri}","HttpMethod":"GET","Uri":"https://localhost:6001/health","EventId":{"Id":100,"Name":"RequestStart"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:06.1313203Z","@mt":"Received HTTP response headers after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":3.2231,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.ClientHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:06.1357141Z","@mt":"End processing HTTP request after {ElapsedMilliseconds}ms - {StatusCode}","ElapsedMilliseconds":10.442,"StatusCode":200,"EventId":{"Id":101,"Name":"RequestPipelineEnd"},"SourceContext":"System.Net.Http.HttpClient.health-checks.LogicalHandler","HttpMethod":"GET","Uri":"https://localhost:6001/health","Scope":["HealthReportCollector is collecting health checks results.","HTTP GET https://localhost:6001/health"]}
{"@t":"2021-02-24T21:56:06.1394676Z","@mt":"Saved {count} entities to in-memory store.","count":1,"EventId":{"Id":30100,"Name":"Microsoft.EntityFrameworkCore.Update.ChangesSaved"},"SourceContext":"Microsoft.EntityFrameworkCore.Update","Scope":["HealthReportCollector is collecting health checks results."]}
